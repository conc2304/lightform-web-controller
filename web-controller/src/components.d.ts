/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { LfScene, LfViewportBreakpoint } from "./shared/interfaces/lf-web-controller.interface";
import { LfViewportSize } from "./shared/enums/lf-viewport-query-sizes.enum";
export namespace Components {
    interface AppRoot {
    }
    interface LfDeviceSelectorModal {
    }
    interface LfHeaderToolbar {
    }
    interface LfLoadingMessage {
        "message": string;
    }
    interface LfNowPlaying {
    }
    interface LfSceneCard {
        "scene": LfScene;
        "selected": boolean;
    }
    interface LfSideMenu {
    }
    interface LfTabBarNavigation {
        "currentRoute": string;
    }
    interface LfViewportSizePublisher {
        "getCurrentSize": () => Promise<LfViewportSize>;
        "sizes": Array<LfViewportBreakpoint>;
    }
    interface PageHome {
    }
    interface PageLogin {
    }
}
declare global {
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLLfDeviceSelectorModalElement extends Components.LfDeviceSelectorModal, HTMLStencilElement {
    }
    var HTMLLfDeviceSelectorModalElement: {
        prototype: HTMLLfDeviceSelectorModalElement;
        new (): HTMLLfDeviceSelectorModalElement;
    };
    interface HTMLLfHeaderToolbarElement extends Components.LfHeaderToolbar, HTMLStencilElement {
    }
    var HTMLLfHeaderToolbarElement: {
        prototype: HTMLLfHeaderToolbarElement;
        new (): HTMLLfHeaderToolbarElement;
    };
    interface HTMLLfLoadingMessageElement extends Components.LfLoadingMessage, HTMLStencilElement {
    }
    var HTMLLfLoadingMessageElement: {
        prototype: HTMLLfLoadingMessageElement;
        new (): HTMLLfLoadingMessageElement;
    };
    interface HTMLLfNowPlayingElement extends Components.LfNowPlaying, HTMLStencilElement {
    }
    var HTMLLfNowPlayingElement: {
        prototype: HTMLLfNowPlayingElement;
        new (): HTMLLfNowPlayingElement;
    };
    interface HTMLLfSceneCardElement extends Components.LfSceneCard, HTMLStencilElement {
    }
    var HTMLLfSceneCardElement: {
        prototype: HTMLLfSceneCardElement;
        new (): HTMLLfSceneCardElement;
    };
    interface HTMLLfSideMenuElement extends Components.LfSideMenu, HTMLStencilElement {
    }
    var HTMLLfSideMenuElement: {
        prototype: HTMLLfSideMenuElement;
        new (): HTMLLfSideMenuElement;
    };
    interface HTMLLfTabBarNavigationElement extends Components.LfTabBarNavigation, HTMLStencilElement {
    }
    var HTMLLfTabBarNavigationElement: {
        prototype: HTMLLfTabBarNavigationElement;
        new (): HTMLLfTabBarNavigationElement;
    };
    interface HTMLLfViewportSizePublisherElement extends Components.LfViewportSizePublisher, HTMLStencilElement {
    }
    var HTMLLfViewportSizePublisherElement: {
        prototype: HTMLLfViewportSizePublisherElement;
        new (): HTMLLfViewportSizePublisherElement;
    };
    interface HTMLPageHomeElement extends Components.PageHome, HTMLStencilElement {
    }
    var HTMLPageHomeElement: {
        prototype: HTMLPageHomeElement;
        new (): HTMLPageHomeElement;
    };
    interface HTMLPageLoginElement extends Components.PageLogin, HTMLStencilElement {
    }
    var HTMLPageLoginElement: {
        prototype: HTMLPageLoginElement;
        new (): HTMLPageLoginElement;
    };
    interface HTMLElementTagNameMap {
        "app-root": HTMLAppRootElement;
        "lf-device-selector-modal": HTMLLfDeviceSelectorModalElement;
        "lf-header-toolbar": HTMLLfHeaderToolbarElement;
        "lf-loading-message": HTMLLfLoadingMessageElement;
        "lf-now-playing": HTMLLfNowPlayingElement;
        "lf-scene-card": HTMLLfSceneCardElement;
        "lf-side-menu": HTMLLfSideMenuElement;
        "lf-tab-bar-navigation": HTMLLfTabBarNavigationElement;
        "lf-viewport-size-publisher": HTMLLfViewportSizePublisherElement;
        "page-home": HTMLPageHomeElement;
        "page-login": HTMLPageLoginElement;
    }
}
declare namespace LocalJSX {
    interface AppRoot {
    }
    interface LfDeviceSelectorModal {
    }
    interface LfHeaderToolbar {
        "onDeviceSelected"?: (event: CustomEvent<any>) => void;
    }
    interface LfLoadingMessage {
        "message"?: string;
    }
    interface LfNowPlaying {
    }
    interface LfSceneCard {
        "scene"?: LfScene;
        "selected"?: boolean;
    }
    interface LfSideMenu {
    }
    interface LfTabBarNavigation {
        "currentRoute"?: string;
    }
    interface LfViewportSizePublisher {
        "sizes"?: Array<LfViewportBreakpoint>;
    }
    interface PageHome {
    }
    interface PageLogin {
    }
    interface IntrinsicElements {
        "app-root": AppRoot;
        "lf-device-selector-modal": LfDeviceSelectorModal;
        "lf-header-toolbar": LfHeaderToolbar;
        "lf-loading-message": LfLoadingMessage;
        "lf-now-playing": LfNowPlaying;
        "lf-scene-card": LfSceneCard;
        "lf-side-menu": LfSideMenu;
        "lf-tab-bar-navigation": LfTabBarNavigation;
        "lf-viewport-size-publisher": LfViewportSizePublisher;
        "page-home": PageHome;
        "page-login": PageLogin;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "lf-device-selector-modal": LocalJSX.LfDeviceSelectorModal & JSXBase.HTMLAttributes<HTMLLfDeviceSelectorModalElement>;
            "lf-header-toolbar": LocalJSX.LfHeaderToolbar & JSXBase.HTMLAttributes<HTMLLfHeaderToolbarElement>;
            "lf-loading-message": LocalJSX.LfLoadingMessage & JSXBase.HTMLAttributes<HTMLLfLoadingMessageElement>;
            "lf-now-playing": LocalJSX.LfNowPlaying & JSXBase.HTMLAttributes<HTMLLfNowPlayingElement>;
            "lf-scene-card": LocalJSX.LfSceneCard & JSXBase.HTMLAttributes<HTMLLfSceneCardElement>;
            "lf-side-menu": LocalJSX.LfSideMenu & JSXBase.HTMLAttributes<HTMLLfSideMenuElement>;
            "lf-tab-bar-navigation": LocalJSX.LfTabBarNavigation & JSXBase.HTMLAttributes<HTMLLfTabBarNavigationElement>;
            "lf-viewport-size-publisher": LocalJSX.LfViewportSizePublisher & JSXBase.HTMLAttributes<HTMLLfViewportSizePublisherElement>;
            "page-home": LocalJSX.PageHome & JSXBase.HTMLAttributes<HTMLPageHomeElement>;
            "page-login": LocalJSX.PageLogin & JSXBase.HTMLAttributes<HTMLPageLoginElement>;
        }
    }
}
